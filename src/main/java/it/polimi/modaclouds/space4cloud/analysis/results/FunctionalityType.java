//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.07.31 at 05:18:06 PM CEST 
//


package it.polimi.modaclouds.space4cloud.analysis.results;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for FunctionalityType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FunctionalityType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="HourlyRT" type="{}HourlyRTType" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FunctionalityType", namespace = "", propOrder = {
    "hourlyRT"
})
public class FunctionalityType
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(name = "HourlyRT", required = true)
    protected List<HourlyRTType> hourlyRT;
    @XmlAttribute(name = "id")
    protected String id;
    @XmlAttribute(name = "name")
    @XmlSchemaType(name = "anySimpleType")
    protected String name;

    /**
     * Gets the value of the hourlyRT property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the hourlyRT property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getHourlyRT().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link HourlyRTType }
     * 
     * 
     */
    public List<HourlyRTType> getHourlyRT() {
        if (hourlyRT == null) {
            hourlyRT = new ArrayList<HourlyRTType>();
        }
        return this.hourlyRT;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<HourlyRTType> theHourlyRT;
            theHourlyRT = (((this.hourlyRT!= null)&&(!this.hourlyRT.isEmpty()))?this.getHourlyRT():null);
            strategy.appendField(locator, this, "hourlyRT", buffer, theHourlyRT);
        }
        {
            String theId;
            theId = this.getId();
            strategy.appendField(locator, this, "id", buffer, theId);
        }
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FunctionalityType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final FunctionalityType that = ((FunctionalityType) object);
        {
            List<HourlyRTType> lhsHourlyRT;
            lhsHourlyRT = (((this.hourlyRT!= null)&&(!this.hourlyRT.isEmpty()))?this.getHourlyRT():null);
            List<HourlyRTType> rhsHourlyRT;
            rhsHourlyRT = (((that.hourlyRT!= null)&&(!that.hourlyRT.isEmpty()))?that.getHourlyRT():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hourlyRT", lhsHourlyRT), LocatorUtils.property(thatLocator, "hourlyRT", rhsHourlyRT), lhsHourlyRT, rhsHourlyRT)) {
                return false;
            }
        }
        {
            String lhsId;
            lhsId = this.getId();
            String rhsId;
            rhsId = that.getId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                return false;
            }
        }
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<HourlyRTType> theHourlyRT;
            theHourlyRT = (((this.hourlyRT!= null)&&(!this.hourlyRT.isEmpty()))?this.getHourlyRT():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hourlyRT", theHourlyRT), currentHashCode, theHourlyRT);
        }
        {
            String theId;
            theId = this.getId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
        }
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof FunctionalityType) {
            final FunctionalityType copy = ((FunctionalityType) draftCopy);
            if ((this.hourlyRT!= null)&&(!this.hourlyRT.isEmpty())) {
                List<HourlyRTType> sourceHourlyRT;
                sourceHourlyRT = (((this.hourlyRT!= null)&&(!this.hourlyRT.isEmpty()))?this.getHourlyRT():null);
                @SuppressWarnings("unchecked")
                List<HourlyRTType> copyHourlyRT = ((List<HourlyRTType> ) strategy.copy(LocatorUtils.property(locator, "hourlyRT", sourceHourlyRT), sourceHourlyRT));
                copy.hourlyRT = null;
                if (copyHourlyRT!= null) {
                    List<HourlyRTType> uniqueHourlyRTl = copy.getHourlyRT();
                    uniqueHourlyRTl.addAll(copyHourlyRT);
                }
            } else {
                copy.hourlyRT = null;
            }
            if (this.id!= null) {
                String sourceId;
                sourceId = this.getId();
                String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                copy.setId(copyId);
            } else {
                copy.id = null;
            }
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new FunctionalityType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof FunctionalityType) {
            final FunctionalityType target = this;
            final FunctionalityType leftObject = ((FunctionalityType) left);
            final FunctionalityType rightObject = ((FunctionalityType) right);
            {
                List<HourlyRTType> lhsHourlyRT;
                lhsHourlyRT = (((leftObject.hourlyRT!= null)&&(!leftObject.hourlyRT.isEmpty()))?leftObject.getHourlyRT():null);
                List<HourlyRTType> rhsHourlyRT;
                rhsHourlyRT = (((rightObject.hourlyRT!= null)&&(!rightObject.hourlyRT.isEmpty()))?rightObject.getHourlyRT():null);
                List<HourlyRTType> mergedHourlyRT = ((List<HourlyRTType> ) strategy.merge(LocatorUtils.property(leftLocator, "hourlyRT", lhsHourlyRT), LocatorUtils.property(rightLocator, "hourlyRT", rhsHourlyRT), lhsHourlyRT, rhsHourlyRT));
                target.hourlyRT = null;
                if (mergedHourlyRT!= null) {
                    List<HourlyRTType> uniqueHourlyRTl = target.getHourlyRT();
                    uniqueHourlyRTl.addAll(mergedHourlyRT);
                }
            }
            {
                String lhsId;
                lhsId = leftObject.getId();
                String rhsId;
                rhsId = rightObject.getId();
                String mergedId = ((String) strategy.merge(LocatorUtils.property(leftLocator, "id", lhsId), LocatorUtils.property(rightLocator, "id", rhsId), lhsId, rhsId));
                target.setId(mergedId);
            }
            {
                String lhsName;
                lhsName = leftObject.getName();
                String rhsName;
                rhsName = rightObject.getName();
                String mergedName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName));
                target.setName(mergedName);
            }
        }
    }

}
