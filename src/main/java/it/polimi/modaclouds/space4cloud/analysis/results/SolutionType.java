//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.07.31 at 05:18:06 PM CEST 
//


package it.polimi.modaclouds.space4cloud.analysis.results;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for SolutionType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SolutionType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Functionality" type="{}FunctionalityType" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *       &lt;attribute name="cost" type="{http://www.w3.org/2001/XMLSchema}double" />
 *       &lt;attribute name="feasibility" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="generationIteration" type="{http://www.w3.org/2001/XMLSchema}int" />
 *       &lt;attribute name="generationTime" type="{http://www.w3.org/2001/XMLSchema}long" />
 *       &lt;attribute name="provider" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SolutionType", namespace = "", propOrder = {
    "functionality"
})
public class SolutionType
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(name = "Functionality", required = true)
    protected List<FunctionalityType> functionality;
    @XmlAttribute(name = "cost")
    protected Double cost;
    @XmlAttribute(name = "feasibility")
    protected Boolean feasibility;
    @XmlAttribute(name = "generationIteration")
    protected Integer generationIteration;
    @XmlAttribute(name = "generationTime")
    protected Long generationTime;
    @XmlAttribute(name = "provider")
    protected String provider;

    /**
     * Gets the value of the functionality property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the functionality property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFunctionality().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FunctionalityType }
     * 
     * 
     */
    public List<FunctionalityType> getFunctionality() {
        if (functionality == null) {
            functionality = new ArrayList<FunctionalityType>();
        }
        return this.functionality;
    }

    /**
     * Gets the value of the cost property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getCost() {
        return cost;
    }

    /**
     * Sets the value of the cost property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setCost(Double value) {
        this.cost = value;
    }

    /**
     * Gets the value of the feasibility property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isFeasibility() {
        return feasibility;
    }

    /**
     * Sets the value of the feasibility property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setFeasibility(Boolean value) {
        this.feasibility = value;
    }

    /**
     * Gets the value of the generationIteration property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getGenerationIteration() {
        return generationIteration;
    }

    /**
     * Sets the value of the generationIteration property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setGenerationIteration(Integer value) {
        this.generationIteration = value;
    }

    /**
     * Gets the value of the generationTime property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getGenerationTime() {
        return generationTime;
    }

    /**
     * Sets the value of the generationTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setGenerationTime(Long value) {
        this.generationTime = value;
    }

    /**
     * Gets the value of the provider property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProvider() {
        return provider;
    }

    /**
     * Sets the value of the provider property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProvider(String value) {
        this.provider = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<FunctionalityType> theFunctionality;
            theFunctionality = (((this.functionality!= null)&&(!this.functionality.isEmpty()))?this.getFunctionality():null);
            strategy.appendField(locator, this, "functionality", buffer, theFunctionality);
        }
        {
            Double theCost;
            theCost = this.getCost();
            strategy.appendField(locator, this, "cost", buffer, theCost);
        }
        {
            Boolean theFeasibility;
            theFeasibility = this.isFeasibility();
            strategy.appendField(locator, this, "feasibility", buffer, theFeasibility);
        }
        {
            Integer theGenerationIteration;
            theGenerationIteration = this.getGenerationIteration();
            strategy.appendField(locator, this, "generationIteration", buffer, theGenerationIteration);
        }
        {
            Long theGenerationTime;
            theGenerationTime = this.getGenerationTime();
            strategy.appendField(locator, this, "generationTime", buffer, theGenerationTime);
        }
        {
            String theProvider;
            theProvider = this.getProvider();
            strategy.appendField(locator, this, "provider", buffer, theProvider);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SolutionType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SolutionType that = ((SolutionType) object);
        {
            List<FunctionalityType> lhsFunctionality;
            lhsFunctionality = (((this.functionality!= null)&&(!this.functionality.isEmpty()))?this.getFunctionality():null);
            List<FunctionalityType> rhsFunctionality;
            rhsFunctionality = (((that.functionality!= null)&&(!that.functionality.isEmpty()))?that.getFunctionality():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "functionality", lhsFunctionality), LocatorUtils.property(thatLocator, "functionality", rhsFunctionality), lhsFunctionality, rhsFunctionality)) {
                return false;
            }
        }
        {
            Double lhsCost;
            lhsCost = this.getCost();
            Double rhsCost;
            rhsCost = that.getCost();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cost", lhsCost), LocatorUtils.property(thatLocator, "cost", rhsCost), lhsCost, rhsCost)) {
                return false;
            }
        }
        {
            Boolean lhsFeasibility;
            lhsFeasibility = this.isFeasibility();
            Boolean rhsFeasibility;
            rhsFeasibility = that.isFeasibility();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "feasibility", lhsFeasibility), LocatorUtils.property(thatLocator, "feasibility", rhsFeasibility), lhsFeasibility, rhsFeasibility)) {
                return false;
            }
        }
        {
            Integer lhsGenerationIteration;
            lhsGenerationIteration = this.getGenerationIteration();
            Integer rhsGenerationIteration;
            rhsGenerationIteration = that.getGenerationIteration();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "generationIteration", lhsGenerationIteration), LocatorUtils.property(thatLocator, "generationIteration", rhsGenerationIteration), lhsGenerationIteration, rhsGenerationIteration)) {
                return false;
            }
        }
        {
            Long lhsGenerationTime;
            lhsGenerationTime = this.getGenerationTime();
            Long rhsGenerationTime;
            rhsGenerationTime = that.getGenerationTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "generationTime", lhsGenerationTime), LocatorUtils.property(thatLocator, "generationTime", rhsGenerationTime), lhsGenerationTime, rhsGenerationTime)) {
                return false;
            }
        }
        {
            String lhsProvider;
            lhsProvider = this.getProvider();
            String rhsProvider;
            rhsProvider = that.getProvider();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "provider", lhsProvider), LocatorUtils.property(thatLocator, "provider", rhsProvider), lhsProvider, rhsProvider)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<FunctionalityType> theFunctionality;
            theFunctionality = (((this.functionality!= null)&&(!this.functionality.isEmpty()))?this.getFunctionality():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "functionality", theFunctionality), currentHashCode, theFunctionality);
        }
        {
            Double theCost;
            theCost = this.getCost();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cost", theCost), currentHashCode, theCost);
        }
        {
            Boolean theFeasibility;
            theFeasibility = this.isFeasibility();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "feasibility", theFeasibility), currentHashCode, theFeasibility);
        }
        {
            Integer theGenerationIteration;
            theGenerationIteration = this.getGenerationIteration();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "generationIteration", theGenerationIteration), currentHashCode, theGenerationIteration);
        }
        {
            Long theGenerationTime;
            theGenerationTime = this.getGenerationTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "generationTime", theGenerationTime), currentHashCode, theGenerationTime);
        }
        {
            String theProvider;
            theProvider = this.getProvider();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "provider", theProvider), currentHashCode, theProvider);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SolutionType) {
            final SolutionType copy = ((SolutionType) draftCopy);
            if ((this.functionality!= null)&&(!this.functionality.isEmpty())) {
                List<FunctionalityType> sourceFunctionality;
                sourceFunctionality = (((this.functionality!= null)&&(!this.functionality.isEmpty()))?this.getFunctionality():null);
                @SuppressWarnings("unchecked")
                List<FunctionalityType> copyFunctionality = ((List<FunctionalityType> ) strategy.copy(LocatorUtils.property(locator, "functionality", sourceFunctionality), sourceFunctionality));
                copy.functionality = null;
                if (copyFunctionality!= null) {
                    List<FunctionalityType> uniqueFunctionalityl = copy.getFunctionality();
                    uniqueFunctionalityl.addAll(copyFunctionality);
                }
            } else {
                copy.functionality = null;
            }
            if (this.cost!= null) {
                Double sourceCost;
                sourceCost = this.getCost();
                Double copyCost = ((Double) strategy.copy(LocatorUtils.property(locator, "cost", sourceCost), sourceCost));
                copy.setCost(copyCost);
            } else {
                copy.cost = null;
            }
            if (this.feasibility!= null) {
                Boolean sourceFeasibility;
                sourceFeasibility = this.isFeasibility();
                Boolean copyFeasibility = ((Boolean) strategy.copy(LocatorUtils.property(locator, "feasibility", sourceFeasibility), sourceFeasibility));
                copy.setFeasibility(copyFeasibility);
            } else {
                copy.feasibility = null;
            }
            if (this.generationIteration!= null) {
                Integer sourceGenerationIteration;
                sourceGenerationIteration = this.getGenerationIteration();
                Integer copyGenerationIteration = ((Integer) strategy.copy(LocatorUtils.property(locator, "generationIteration", sourceGenerationIteration), sourceGenerationIteration));
                copy.setGenerationIteration(copyGenerationIteration);
            } else {
                copy.generationIteration = null;
            }
            if (this.generationTime!= null) {
                Long sourceGenerationTime;
                sourceGenerationTime = this.getGenerationTime();
                Long copyGenerationTime = ((Long) strategy.copy(LocatorUtils.property(locator, "generationTime", sourceGenerationTime), sourceGenerationTime));
                copy.setGenerationTime(copyGenerationTime);
            } else {
                copy.generationTime = null;
            }
            if (this.provider!= null) {
                String sourceProvider;
                sourceProvider = this.getProvider();
                String copyProvider = ((String) strategy.copy(LocatorUtils.property(locator, "provider", sourceProvider), sourceProvider));
                copy.setProvider(copyProvider);
            } else {
                copy.provider = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SolutionType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof SolutionType) {
            final SolutionType target = this;
            final SolutionType leftObject = ((SolutionType) left);
            final SolutionType rightObject = ((SolutionType) right);
            {
                List<FunctionalityType> lhsFunctionality;
                lhsFunctionality = (((leftObject.functionality!= null)&&(!leftObject.functionality.isEmpty()))?leftObject.getFunctionality():null);
                List<FunctionalityType> rhsFunctionality;
                rhsFunctionality = (((rightObject.functionality!= null)&&(!rightObject.functionality.isEmpty()))?rightObject.getFunctionality():null);
                List<FunctionalityType> mergedFunctionality = ((List<FunctionalityType> ) strategy.merge(LocatorUtils.property(leftLocator, "functionality", lhsFunctionality), LocatorUtils.property(rightLocator, "functionality", rhsFunctionality), lhsFunctionality, rhsFunctionality));
                target.functionality = null;
                if (mergedFunctionality!= null) {
                    List<FunctionalityType> uniqueFunctionalityl = target.getFunctionality();
                    uniqueFunctionalityl.addAll(mergedFunctionality);
                }
            }
            {
                Double lhsCost;
                lhsCost = leftObject.getCost();
                Double rhsCost;
                rhsCost = rightObject.getCost();
                Double mergedCost = ((Double) strategy.merge(LocatorUtils.property(leftLocator, "cost", lhsCost), LocatorUtils.property(rightLocator, "cost", rhsCost), lhsCost, rhsCost));
                target.setCost(mergedCost);
            }
            {
                Boolean lhsFeasibility;
                lhsFeasibility = leftObject.isFeasibility();
                Boolean rhsFeasibility;
                rhsFeasibility = rightObject.isFeasibility();
                Boolean mergedFeasibility = ((Boolean) strategy.merge(LocatorUtils.property(leftLocator, "feasibility", lhsFeasibility), LocatorUtils.property(rightLocator, "feasibility", rhsFeasibility), lhsFeasibility, rhsFeasibility));
                target.setFeasibility(mergedFeasibility);
            }
            {
                Integer lhsGenerationIteration;
                lhsGenerationIteration = leftObject.getGenerationIteration();
                Integer rhsGenerationIteration;
                rhsGenerationIteration = rightObject.getGenerationIteration();
                Integer mergedGenerationIteration = ((Integer) strategy.merge(LocatorUtils.property(leftLocator, "generationIteration", lhsGenerationIteration), LocatorUtils.property(rightLocator, "generationIteration", rhsGenerationIteration), lhsGenerationIteration, rhsGenerationIteration));
                target.setGenerationIteration(mergedGenerationIteration);
            }
            {
                Long lhsGenerationTime;
                lhsGenerationTime = leftObject.getGenerationTime();
                Long rhsGenerationTime;
                rhsGenerationTime = rightObject.getGenerationTime();
                Long mergedGenerationTime = ((Long) strategy.merge(LocatorUtils.property(leftLocator, "generationTime", lhsGenerationTime), LocatorUtils.property(rightLocator, "generationTime", rhsGenerationTime), lhsGenerationTime, rhsGenerationTime));
                target.setGenerationTime(mergedGenerationTime);
            }
            {
                String lhsProvider;
                lhsProvider = leftObject.getProvider();
                String rhsProvider;
                rhsProvider = rightObject.getProvider();
                String mergedProvider = ((String) strategy.merge(LocatorUtils.property(leftLocator, "provider", lhsProvider), LocatorUtils.property(rightLocator, "provider", rhsProvider), lhsProvider, rhsProvider));
                target.setProvider(mergedProvider);
            }
        }
    }

}
