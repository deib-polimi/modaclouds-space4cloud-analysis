//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.07.31 at 05:18:06 PM CEST 
//


package it.polimi.modaclouds.space4cloud.analysis.results;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for iaasService complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="iaasService">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="resourceSizeID" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="location" type="{http://www.modaclouds.eu/xsd/2013/6/resource-model-extension}location" minOccurs="0"/>
 *         &lt;element name="replicas" type="{http://www.modaclouds.eu/xsd/2013/6/resource-model-extension}replica" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="serviceType" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="serviceName" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "iaasService", propOrder = {
    "resourceSizeID",
    "location",
    "replicas"
})
public class IaasService
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String resourceSizeID;
    protected Location location;
    protected Replica replicas;
    @XmlAttribute(name = "serviceType", required = true)
    protected String serviceType;
    @XmlAttribute(name = "serviceName")
    protected String serviceName;

    /**
     * Gets the value of the resourceSizeID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getResourceSizeID() {
        return resourceSizeID;
    }

    /**
     * Sets the value of the resourceSizeID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setResourceSizeID(String value) {
        this.resourceSizeID = value;
    }

    /**
     * Gets the value of the location property.
     * 
     * @return
     *     possible object is
     *     {@link Location }
     *     
     */
    public Location getLocation() {
        return location;
    }

    /**
     * Sets the value of the location property.
     * 
     * @param value
     *     allowed object is
     *     {@link Location }
     *     
     */
    public void setLocation(Location value) {
        this.location = value;
    }

    /**
     * Gets the value of the replicas property.
     * 
     * @return
     *     possible object is
     *     {@link Replica }
     *     
     */
    public Replica getReplicas() {
        return replicas;
    }

    /**
     * Sets the value of the replicas property.
     * 
     * @param value
     *     allowed object is
     *     {@link Replica }
     *     
     */
    public void setReplicas(Replica value) {
        this.replicas = value;
    }

    /**
     * Gets the value of the serviceType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getServiceType() {
        return serviceType;
    }

    /**
     * Sets the value of the serviceType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setServiceType(String value) {
        this.serviceType = value;
    }

    /**
     * Gets the value of the serviceName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getServiceName() {
        return serviceName;
    }

    /**
     * Sets the value of the serviceName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setServiceName(String value) {
        this.serviceName = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theResourceSizeID;
            theResourceSizeID = this.getResourceSizeID();
            strategy.appendField(locator, this, "resourceSizeID", buffer, theResourceSizeID);
        }
        {
            Location theLocation;
            theLocation = this.getLocation();
            strategy.appendField(locator, this, "location", buffer, theLocation);
        }
        {
            Replica theReplicas;
            theReplicas = this.getReplicas();
            strategy.appendField(locator, this, "replicas", buffer, theReplicas);
        }
        {
            String theServiceType;
            theServiceType = this.getServiceType();
            strategy.appendField(locator, this, "serviceType", buffer, theServiceType);
        }
        {
            String theServiceName;
            theServiceName = this.getServiceName();
            strategy.appendField(locator, this, "serviceName", buffer, theServiceName);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof IaasService)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final IaasService that = ((IaasService) object);
        {
            String lhsResourceSizeID;
            lhsResourceSizeID = this.getResourceSizeID();
            String rhsResourceSizeID;
            rhsResourceSizeID = that.getResourceSizeID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resourceSizeID", lhsResourceSizeID), LocatorUtils.property(thatLocator, "resourceSizeID", rhsResourceSizeID), lhsResourceSizeID, rhsResourceSizeID)) {
                return false;
            }
        }
        {
            Location lhsLocation;
            lhsLocation = this.getLocation();
            Location rhsLocation;
            rhsLocation = that.getLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation)) {
                return false;
            }
        }
        {
            Replica lhsReplicas;
            lhsReplicas = this.getReplicas();
            Replica rhsReplicas;
            rhsReplicas = that.getReplicas();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "replicas", lhsReplicas), LocatorUtils.property(thatLocator, "replicas", rhsReplicas), lhsReplicas, rhsReplicas)) {
                return false;
            }
        }
        {
            String lhsServiceType;
            lhsServiceType = this.getServiceType();
            String rhsServiceType;
            rhsServiceType = that.getServiceType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "serviceType", lhsServiceType), LocatorUtils.property(thatLocator, "serviceType", rhsServiceType), lhsServiceType, rhsServiceType)) {
                return false;
            }
        }
        {
            String lhsServiceName;
            lhsServiceName = this.getServiceName();
            String rhsServiceName;
            rhsServiceName = that.getServiceName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "serviceName", lhsServiceName), LocatorUtils.property(thatLocator, "serviceName", rhsServiceName), lhsServiceName, rhsServiceName)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theResourceSizeID;
            theResourceSizeID = this.getResourceSizeID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resourceSizeID", theResourceSizeID), currentHashCode, theResourceSizeID);
        }
        {
            Location theLocation;
            theLocation = this.getLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation);
        }
        {
            Replica theReplicas;
            theReplicas = this.getReplicas();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "replicas", theReplicas), currentHashCode, theReplicas);
        }
        {
            String theServiceType;
            theServiceType = this.getServiceType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "serviceType", theServiceType), currentHashCode, theServiceType);
        }
        {
            String theServiceName;
            theServiceName = this.getServiceName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "serviceName", theServiceName), currentHashCode, theServiceName);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof IaasService) {
            final IaasService copy = ((IaasService) draftCopy);
            if (this.resourceSizeID!= null) {
                String sourceResourceSizeID;
                sourceResourceSizeID = this.getResourceSizeID();
                String copyResourceSizeID = ((String) strategy.copy(LocatorUtils.property(locator, "resourceSizeID", sourceResourceSizeID), sourceResourceSizeID));
                copy.setResourceSizeID(copyResourceSizeID);
            } else {
                copy.resourceSizeID = null;
            }
            if (this.location!= null) {
                Location sourceLocation;
                sourceLocation = this.getLocation();
                Location copyLocation = ((Location) strategy.copy(LocatorUtils.property(locator, "location", sourceLocation), sourceLocation));
                copy.setLocation(copyLocation);
            } else {
                copy.location = null;
            }
            if (this.replicas!= null) {
                Replica sourceReplicas;
                sourceReplicas = this.getReplicas();
                Replica copyReplicas = ((Replica) strategy.copy(LocatorUtils.property(locator, "replicas", sourceReplicas), sourceReplicas));
                copy.setReplicas(copyReplicas);
            } else {
                copy.replicas = null;
            }
            if (this.serviceType!= null) {
                String sourceServiceType;
                sourceServiceType = this.getServiceType();
                String copyServiceType = ((String) strategy.copy(LocatorUtils.property(locator, "serviceType", sourceServiceType), sourceServiceType));
                copy.setServiceType(copyServiceType);
            } else {
                copy.serviceType = null;
            }
            if (this.serviceName!= null) {
                String sourceServiceName;
                sourceServiceName = this.getServiceName();
                String copyServiceName = ((String) strategy.copy(LocatorUtils.property(locator, "serviceName", sourceServiceName), sourceServiceName));
                copy.setServiceName(copyServiceName);
            } else {
                copy.serviceName = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new IaasService();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof IaasService) {
            final IaasService target = this;
            final IaasService leftObject = ((IaasService) left);
            final IaasService rightObject = ((IaasService) right);
            {
                String lhsResourceSizeID;
                lhsResourceSizeID = leftObject.getResourceSizeID();
                String rhsResourceSizeID;
                rhsResourceSizeID = rightObject.getResourceSizeID();
                String mergedResourceSizeID = ((String) strategy.merge(LocatorUtils.property(leftLocator, "resourceSizeID", lhsResourceSizeID), LocatorUtils.property(rightLocator, "resourceSizeID", rhsResourceSizeID), lhsResourceSizeID, rhsResourceSizeID));
                target.setResourceSizeID(mergedResourceSizeID);
            }
            {
                Location lhsLocation;
                lhsLocation = leftObject.getLocation();
                Location rhsLocation;
                rhsLocation = rightObject.getLocation();
                Location mergedLocation = ((Location) strategy.merge(LocatorUtils.property(leftLocator, "location", lhsLocation), LocatorUtils.property(rightLocator, "location", rhsLocation), lhsLocation, rhsLocation));
                target.setLocation(mergedLocation);
            }
            {
                Replica lhsReplicas;
                lhsReplicas = leftObject.getReplicas();
                Replica rhsReplicas;
                rhsReplicas = rightObject.getReplicas();
                Replica mergedReplicas = ((Replica) strategy.merge(LocatorUtils.property(leftLocator, "replicas", lhsReplicas), LocatorUtils.property(rightLocator, "replicas", rhsReplicas), lhsReplicas, rhsReplicas));
                target.setReplicas(mergedReplicas);
            }
            {
                String lhsServiceType;
                lhsServiceType = leftObject.getServiceType();
                String rhsServiceType;
                rhsServiceType = rightObject.getServiceType();
                String mergedServiceType = ((String) strategy.merge(LocatorUtils.property(leftLocator, "serviceType", lhsServiceType), LocatorUtils.property(rightLocator, "serviceType", rhsServiceType), lhsServiceType, rhsServiceType));
                target.setServiceType(mergedServiceType);
            }
            {
                String lhsServiceName;
                lhsServiceName = leftObject.getServiceName();
                String rhsServiceName;
                rhsServiceName = rightObject.getServiceName();
                String mergedServiceName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "serviceName", lhsServiceName), LocatorUtils.property(rightLocator, "serviceName", rhsServiceName), lhsServiceName, rhsServiceName));
                target.setServiceName(mergedServiceName);
            }
        }
    }

}
